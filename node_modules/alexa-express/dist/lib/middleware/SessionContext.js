var EventEmitter, SessionContext,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

module.exports = SessionContext = (function(_super) {
  __extends(SessionContext, _super);

  function SessionContext(req, res) {
    this.req = req;
    this.res = res;
    this.clear = __bind(this.clear, this);
    this.init = __bind(this.init, this);
    this.cache = {};
    this.fields = {};
    this.init();
    this.req.context = this;
  }

  SessionContext.prototype.init = function(fields) {
    var fn, k, name, v, _ref, _results;
    if (typeof fields === 'object') {
      for (k in fields) {
        if (!__hasProp.call(fields, k)) continue;
        v = fields[k];
        this.fields[k] = v;
      }
    }
    _ref = this.fields;
    _results = [];
    for (name in _ref) {
      if (!__hasProp.call(_ref, name)) continue;
      fn = _ref[name];
      _results.push((function(_this) {
        return function(name, fn) {
          var val;
          if (typeof fn === 'object') {
            fn = fn.convert;
          }
          _this[name] = function(v) {
            var oldVal;
            if (arguments.length === 0) {
              return _this.cache[name];
            }
            oldVal = _this.cache[name];
            v = fn != null ? fn(v) : v;
            if (v === oldVal) {
              return;
            }
            _this.cache[name] = v;
            _this.res.session(name, v);
            _this.emit("changed", name, v, oldVal);
            return _this.emit("changed:" + name, v, oldVal);
          };
          val = _this.req.session(name);
          return _this[name](fn != null ? fn(val) : val);
        };
      })(this)(name, fn));
    }
    return _results;
  };

  SessionContext.prototype.clear = function() {
    var fn, name, _ref, _results;
    _ref = this.fields;
    _results = [];
    for (name in _ref) {
      if (!__hasProp.call(_ref, name)) continue;
      fn = _ref[name];
      _results.push((function(_this) {
        return function(name, fn) {
          var initial;
          if (typeof fn === 'object') {
            initial = fn.initial;
          }
          return _this[name](initial);
        };
      })(this)(name, fn));
    }
    return _results;
  };

  return SessionContext;

})(EventEmitter);
