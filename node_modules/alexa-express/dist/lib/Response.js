var OutputSpeech, Response, Speech, merge,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __slice = [].slice;

OutputSpeech = require('./outputSpeech/index');

Speech = require('./Speech');

merge = require('./util/merge');

module.exports = Response = (function() {
  function Response(opts) {
    var o, _i, _j, _len, _len1, _ref, _ref1;
    if (opts == null) {
      opts = {};
    }
    this.end = __bind(this.end, this);
    this.render = __bind(this.render, this);
    this.sendWithFormat = __bind(this.sendWithFormat, this);
    this.send = __bind(this.send, this);
    this.tell = __bind(this.tell, this);
    this.ask = __bind(this.ask, this);
    this.reprompt = __bind(this.reprompt, this);
    this.text = __bind(this.text, this);
    this.ssml = __bind(this.ssml, this);
    this.session = __bind(this.session, this);
    this.keepAlive = __bind(this.keepAlive, this);
    this.version = __bind(this.version, this);
    this.data = {
      version: "1.0",
      sessionAttributes: {},
      response: {
        shouldEndSession: true
      }
    };
    _ref = ["app", "out"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      o = _ref[_i];
      this[o] = opts[o] || (function() {
        throw new Error("missing option: " + o);
      })();
    }
    _ref1 = ["req"];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      o = _ref1[_j];
      this[o] = this.app[o];
    }
  }

  Response.prototype.version = function() {
    return this.data.version;
  };

  Response.prototype.keepAlive = function(val) {
    if (typeof val === 'undefined') {
      return !this.data.response.shouldEndSession;
    }
    this.data.response.shouldEndSession = !val;
    return this;
  };

  Response.prototype.session = function(name, value) {
    var k, v;
    if (value != null) {
      this.data.sessionAttributes[name] = value;
    } else {
      if (typeof name === 'string') {
        return this.data.sessionAttributes[name];
      }
      for (k in name) {
        if (!__hasProp.call(name, k)) continue;
        v = name[k];
        this.data.sessionAttributes[k] = v;
      }
    }
    return this;
  };

  Response.prototype.ssml = function(str) {
    if (str == null) {
      return this.data.response.outputSpeech.ssml;
    }
    this.data.response.outputSpeech = OutputSpeech.create({
      type: 'SSML',
      ssml: str
    });
    return this.end();
  };

  Response.prototype.text = function(str) {
    if (str == null) {
      return this.data.response.outputSpeech.text;
    }
    this.data.response.outputSpeech = OutputSpeech.create({
      type: 'PlainText',
      text: str
    });
    return this.end();
  };

  Response.prototype.reprompt = function(str) {
    var s;
    if (str == null) {
      return this.data.response.reprompt;
    }
    s = OutputSpeech.create({
      type: this.app.get("format")
    });
    s.append(str);
    this.data.response.reprompt = {
      outputSpeech: s
    };
    return this;
  };

  Response.prototype.ask = function() {
    this.keepAlive(true);
    return this.send.apply(null, arguments);
  };

  Response.prototype.tell = function() {
    this.keepAlive(false);
    return this.send.apply(null, arguments);
  };

  Response.prototype.send = function() {
    var args, str;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    while (Array.isArray(args[0]) && args.length === 1) {
      args = args[0];
    }
    if (args.length > 1) {
      this.reprompt(args[1]);
    }
    str = args[0];
    return this.sendWithFormat(args[0], this.app.get("format"));
  };

  Response.prototype.sendWithFormat = function(str, format) {
    if (format === "SSML") {
      return this.ssml(str);
    }
    if (format === "PlainText") {
      return this.text(str);
    }
    return this.req.next(new Error("unknown format: " + format));
  };

  Response.prototype.render = function(name, locals) {
    var data, s;
    data = merge({}, this.data.sessionAttributes);
    data = merge(data, locals);
    s = new Speech({
      name: name,
      app: this.app
    });
    return s.render(data).then((function(_this) {
      return function(str) {
        return _this.sendWithFormat(str, s.format);
      };
    })(this));
  };

  Response.prototype.end = function() {
    return this.out();
  };

  return Response;

})();
