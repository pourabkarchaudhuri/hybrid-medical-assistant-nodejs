var OutputSpeech, PlainText,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

OutputSpeech = require('./OutputSpeech');

module.exports = PlainText = (function(_super) {
  __extends(PlainText, _super);

  function PlainText(opts) {
    if (opts == null) {
      opts = {};
    }
    this.append = __bind(this.append, this);
    this.clear = __bind(this.clear, this);
    PlainText.__super__.constructor.call(this, opts);
    if (opts.text != null) {
      this.append(opts.text);
    }
  }

  PlainText.prototype.clear = function() {
    return this.text = "";
  };

  PlainText.prototype.append = function(str) {
    return this.text += str;
  };

  return PlainText;

})(OutputSpeech);
