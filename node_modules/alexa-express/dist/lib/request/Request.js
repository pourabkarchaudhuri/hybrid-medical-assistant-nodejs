var Request, TypedClass,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TypedClass = require('../util/TypedClass');

module.exports = Request = (function(_super) {
  __extends(Request, _super);

  function Request(_arg) {
    var f, _i, _len, _ref;
    this.type = _arg.type, this.original = _arg.original;
    this.session = __bind(this.session, this);
    this.slot = __bind(this.slot, this);
    this.slots = __bind(this.slots, this);
    this.init = __bind(this.init, this);
    this.version = this.original.version;
    _ref = ["requestId", "timestamp"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      f = _ref[_i];
      this[f] = this.original.request[f];
    }
    this["new"] = this.original.session["new"];
    this.sessionId = this.original.session.sessionId;
    this.applicationId = this.original.session.application.applicationId;
    this.userId = this.original.session.user.userId;
    this.userAccessToken = this.original.session.user.accessToken;
    this.sessionAttributes = this.original.session.attributes || {};
    this.init();
  }

  Request.prototype.init = function() {};

  Request.prototype.slots = function() {
    var _ref;
    return ((_ref = this.original.request.intent) != null ? _ref.slots : void 0) || {};
  };

  Request.prototype.slot = function(name) {
    var _ref;
    return (_ref = this.slots()[name]) != null ? _ref.value : void 0;
  };

  Request.prototype.session = function(name) {
    return this.sessionAttributes[name];
  };

  Request.create = function(opt) {
    return Request.__super__.constructor.create.call(this, opt, __dirname);
  };

  return Request;

})(TypedClass);
