var Speech, dfs, dot, exists, exts, formats, fs, merge, path, pfind,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

dot = require('dot');

merge = require('./util/merge');

path = require('path');

dfs = require('./util/dfs');

exists = require('./util/exists');

pfind = require('./util/pfind');

path = require('path');

fs = require('fs');

exts = ['txt', 'ssml'];

formats = {
  ".txt": "PlainText",
  ".ssml": "SSML"
};

module.exports = Speech = (function() {
  function Speech(_arg) {
    this.name = _arg.name, this.app = _arg.app;
    this.render = __bind(this.render, this);
    this.findTemplate = __bind(this.findTemplate, this);
    this.load = __bind(this.load, this);
    this.ready = this.load();
    this.defs = {
      cwd: this.app.get("speech"),
      loadfile: function(p) {
        return fs.readFileSync(path.join(this.cwd, p));
      }
    };
  }

  Speech.prototype.load = function() {
    return this.findTemplate().then((function(_this) {
      return function(p) {
        _this.format = formats[path.parse(p).ext];
        return dfs.readFile(p);
      };
    })(this)).then((function(_this) {
      return function(contents) {
        return _this.template = dot.template(contents, null, _this.defs);
      };
    })(this))["catch"](function(err) {
      return console.log(err);
    });
  };

  Speech.prototype.findTemplate = function() {
    var base, ex, test;
    base = path.join(this.app.get("speech"), this.name);
    ex = function(n) {
      return exists("" + base + "." + n, "File");
    };
    test = function(v) {
      return v != null;
    };
    return pfind(exts, ex, test);
  };

  Speech.prototype.render = function(locals) {
    return this.ready.then((function(_this) {
      return function() {
        var data;
        data = merge({}, _this.app.locals);
        data = merge(data, locals);
        return _this.template(data);
      };
    })(this));
  };

  return Speech;

})();
